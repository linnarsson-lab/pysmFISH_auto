import prefect
from prefect import task, Flow, Parameter, flatten, unmapped
from prefect.engine.executors import DaskExecutor
from prefect.environments import LocalEnvironment
from prefect import Task
from prefect.environments.storage import Local

from pysmFISH.microscopy_file_parsers_tasks import nd2_raw_files_selector
from pysmFISH.microscopy_file_parsers_tasks import nikon_nd2_autoparser_zarr
from pysmFISH.configuration_files_tasks import load_experiment_config_file
from pysmFISH.utilities_tasks import create_empty_zarr_file

from prefect.utilities.debug import raise_on_exception

with Flow("parsing",environment=LocalEnvironment(DaskExecutor(address='tcp://193.10.16.58:9234')),
            storage=Local(directory='/home/simone/tmp_code/flows')) as flow:
   
    experiment_fpath = Parameter('experiment_fpath', default = '/wsfish/smfish_ssd/AMEXP20201110_EEL_HumanH1930001V1C_auto')
    parsed_image_tag = Parameter('parsed_image_tag', default = 'img_data')

    
    # Load experiment configuration file generated by robofish machines
    load_exp_cfg = load_experiment_config_file()
    experiment_info = load_exp_cfg(experiment_fpath)

    # Selected the raw .nd2 files
    nd2_selector = nd2_raw_files_selector()
    all_raw_nd2 = nd2_selector(experiment_fpath)

    # Create the zarr file that will contain the parsed data
    create_zarr = create_empty_zarr_file()
    parsed_raw_data_fpath = create_zarr(experiment_fpath,parsed_image_tag)


    # Parse all the nd2 files
    autoparser = nikon_nd2_autoparser_zarr(task_run_name=lambda **kwargs: f"parsing-{kwargs['all_raw_nd2']}")
    parsed_data = autoparser.map(nd2_file_path=all_raw_nd2,parsed_raw_data_fpath=unmapped(parsed_raw_data_fpath),
                                    experiment_info=unmapped(experiment_info))
    parsed_data.set_upstream([parsed_raw_data_fpath,all_raw_nd2])

# with raise_on_exception():
#     flow.run()

flow.register(project_name="test")
# flow.run_agent()