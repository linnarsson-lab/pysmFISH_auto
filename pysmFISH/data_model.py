from typing import *
import yaml
import shoji
import numpy as np
from pathlib import Path

import prefect
from prefect import task
from prefect.engine import signals

from pysmFISH.logger_utils import prefect_logging_setup

import logging

# @task(name='create_shoji_db')
def create_shoji_db(experiment_info):
    """
    This function creates the shoji database that will be used to store
    the output of the analysis. It will also contain the standard settings
    for automated analysis and the parameter obtained from the experiment.yaml
    file generated by the machine

    NB: The settings for the analysis are  adjusted according to the machine 
        used for acquisition. In our case the machines have different components.


        experiment_info: dict
            dictionary containing all the info generated by robofish
    """
    logger = prefect.utilities.logging.get_logger()

    experiment_name = experiment_info['EXP_name']
    try:
        machine = experiment_info['Machine']
    except NameError:
        machine = 'NOT_DEFINED'

    try:
        db = shoji.connect()
    except:
        logger.error(f'Cannot connect to shoji DB')
        err = signals.FAIL(f'Cannot connect to shoji DB')
        raise err
    else:
        if 'FISH' not in db:
            db.FISH = shoji.Workspace()
        
        if experiment_name not in db.FISH:
            db.FISH[experiment_name] = shoji.Workspace()
            ws = db.FISH[experiment_name]
        else:
            ws = db.FISH[experiment_name]
            logger.info('Experiment already present in the database')
        
        if 'experiment_properties' not in db.FISH[experiment_name]:
            db.FISH[experiment_name]['experiment_properties'] = shoji.Workspace()
            experiment_properties_ws = db.FISH[experiment_name]['experiment_properties']
        else:
            experiment_properties_ws = db.FISH[experiment_name]['experiment_properties']
        
        if 'analysis_parameters' not in db.FISH[experiment_name]:
            db.FISH[experiment_name]['analysis_parameters'] = shoji.Workspace()
            analysis_parameters_ws = db.FISH[experiment_name]['analysis_parameters']
        else:
            analysis_parameters_ws = db.FISH[experiment_name]['analysis_parameters']
        
        if 'images_properties' not in db.FISH[experiment_name]:
            db.FISH[experiment_name]['images_properties'] = shoji.Workspace()
            images_properties_ws = db.FISH[experiment_name]['images_properties']
        else:
            images_properties_ws = db.FISH[experiment_name]['images_properties']
        
        if 'dots_data' not in db.FISH[experiment_name]:
            db.FISH[experiment_name]['dots_data'] = shoji.Workspace()
            dots_data_ws = db.FISH[experiment_name]['dots_data']
        else:
            dots_data_ws = db.FISH[experiment_name]['dots_data']
        
        
        # Create the experiment properties workspace
        try:
            experiment_properties_ws.Age = shoji.Tensor("uint8", dims=(), inits=np.array(int(experiment_info['Age']),dtype=np.uint8))
        except ValueError:
            experiment_properties_ws.Age = shoji.Tensor("uint8", dims=(), inits=None)

        experiment_properties_ws.Barcode =                       shoji.Tensor("bool", dims=(), inits=np.array((experiment_info['Barcode'] == 'True'),dtype=np.bool))
        experiment_properties_ws.BarcodeLength =                 shoji.Tensor("uint8",dims=(), inits=np.array(experiment_info['Barcode_length'],dtype= np.uint8))
        experiment_properties_ws.ChamberExp =                    shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Chamber_EXP'],dtype=object)) 
        experiment_properties_ws.Chemistry =                     shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Chemistry'],dtype=object)) 
        experiment_properties_ws.CodebookName =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Codebook'],dtype=object)) 
        experiment_properties_ws.ProbeSetName =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Probe_FASTA_name'],dtype=object)) 
        experiment_properties_ws.ExperimentType =                shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Experiment_type'],dtype=object))
        experiment_properties_ws.ExperimentName =                shoji.Tensor("string",dims=(),inits=np.array(experiment_info['EXP_name'],dtype=object))
        experiment_properties_ws.Machine =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Machine'],dtype=object))
        experiment_properties_ws.Program =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Program'],dtype=object))
        experiment_properties_ws.Operator =                      shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Operator'],dtype=object))
        experiment_properties_ws.Sample =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Sample'],dtype=object))
        experiment_properties_ws.SectionID =                     shoji.Tensor("string",dims=(),inits=np.array(experiment_info['SectionID'],dtype=object))
        experiment_properties_ws.Species =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Species'],dtype=object))
        experiment_properties_ws.Strain =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Strain'],dtype=object))
        experiment_properties_ws.Tissue =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Tissue'],dtype=object))
        experiment_properties_ws.Roi =                           shoji.Tensor("string",dims=(),inits=np.array(experiment_info['roi'],dtype=object))
        experiment_properties_ws.RegionImaged =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['RegionImaged'],dtype=object))
        experiment_properties_ws.SampleOrientation =             shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Orrientation'],dtype=object))
        experiment_properties_ws.TilesOverlappingPercentage =    shoji.Tensor("float32",dims=(),inits=np.array(np.float32(experiment_info['Overlapping_percentage']),dtype=np.float32))
        experiment_properties_ws.StitchingChannel =              shoji.Tensor("string",dims=(),inits=np.array(experiment_info['StitchingChannel'],dtype=object))
        experiment_properties_ws.StitchingType =                 shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Stitching_type'],dtype=object))
        experiment_properties_ws.DataGenerationDate =            shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Start_date'],dtype=object))



        analysis_parameters_ws.RegistrationReferenceHybridization = shoji.Tensor("uint8", dims=(), inits=np.array(1,dtype=np.uint8))

        if machine == 'ROBOFISH1':
            analysis_parameters_ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16))

            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16))

            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16)) 

            analysis_parameters_ws.CountingFishMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=np.array(3,dtype=np.uint8))                                                                   

            analysis_parameters_ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))

            analysis_parameters_ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint16", dims=(2,), inits=np.array([50,50], dtype=np.uint16))

        elif machine == 'ROBOFISH2':

            analysis_parameters_ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16)) 

            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16)) 

            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16))

            analysis_parameters_ws.CountingFishMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=np.array(3,dtype=np.uint8))                                                              

            analysis_parameters_ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))

            analysis_parameters_ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint16", dims=(2,), inits=np.array([50,50], dtype=np.uint16))

        elif machine == 'NOT_DEFINED':

            analysis_parameters_ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16)) 

            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16)) 

            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([8,8], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))
            analysis_parameters_ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([1,1], dtype=np.uint16))

            analysis_parameters_ws.CountingFishMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingFishMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMinObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(2,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint16", dims=(), inits=np.array(200,dtype=np.uint16))
            analysis_parameters_ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint16", dims=(), inits=np.array(1,dtype=np.uint16))

            analysis_parameters_ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=np.array(3,dtype=np.uint8))                                                                    

            analysis_parameters_ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint16", dims=(2,), inits=np.array([100,100], dtype=np.uint16))

            analysis_parameters_ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint16", dims=(2,), inits=np.array([50,50], dtype=np.uint16))


        # Create dimension and tensors for storage of image related properties   
        images_properties_ws.fov =                       shoji.Dimension(shape=None)

        images_properties_ws.hybridization =             shoji.Dimension(shape=1)      
        images_properties_ws.acquisitioncoords=          shoji.Dimension(shape=3)      
        images_properties_ws.registrationshiftcoords=    shoji.Dimension(shape=2)
        images_properties_ws.channel =                   shoji.Dimension(shape=1)
        images_properties_ws.imageshaperc =              shoji.Dimension(shape=2)

        # Rank-1 tensors
        images_properties_ws.FovName = shoji.Tensor("string",dims=('fov',))
        images_properties_ws.AcquistionChannel = shoji.Tensor("string",dims=('fov',))
        images_properties_ws.FovNumber = shoji.Tensor("uint16",dims=('fov',))
        images_properties_ws.HybridizationNumber = shoji.Tensor("uint8",dims=('fov',))

        # Higher ranking tensors
        images_properties_ws.FieldsOfView = shoji.Tensor("uint16",dims=('fov',None))
        images_properties_ws.GroupName = shoji.Tensor("string",dims=('fov','hybridization','channel'))
        images_properties_ws.TargetName = shoji.Tensor("string",dims=('fov','hybridization','channel'))
        images_properties_ws.ImageShape = shoji.Tensor("uint16",dims=('fov','hybridization','channel','imageshaperc'))
        images_properties_ws.PixelMicrons = shoji.Tensor("float64",dims=('fov','hybridization','channel'))
        images_properties_ws.PreprocessedImage = shoji.Tensor("uint16",dims=('fov','hybridization','channel',None,None))
        images_properties_ws.FovCoords = shoji.Tensor("float64",dims=('fov','hybridization','channel','acquisitioncoords'))
        images_properties_ws.RegistrationShift = shoji.Tensor("float64",dims=('fov','hybridization','channel','registrationshiftcoords'))
        images_properties_ws.RegistrationError = shoji.Tensor("float64",dims=('fov','hybridization','channel'))
        images_properties_ws.StitchingShift = shoji.Tensor("float64",dims=('fov','hybridization','channel','registrationshiftcoords'))
        images_properties_ws.StitchingError = shoji.Tensor("float64",dims=('fov','hybridization','channel'))


        # Create dimension and tensors for dots acquisition
        # Dimenstion of the tensors
        dots_data_ws.hybridization =    shoji.Dimension(shape=1)   
        dots_data_ws.fov =              shoji.Dimension(shape=1)   
        dots_data_ws.dots =             shoji.Dimension(shape=None)   
        dots_data_ws.rc =               shoji.Dimension(shape=2)      
        dots_data_ws.bits =             shoji.Dimension(shape=16)  # Depend on the barcodes used
        dots_data_ws.gene =             shoji.Dimension(shape=1) 
       
        # Rank-1 tensors
        dots_data_ws.DotID =                           shoji.Tensor("string", dims=('dots',))
        dots_data_ws.FovNumber =                       shoji.Tensor("uint16", dims=('dots',))
        dots_data_ws.HybridizationNumber =             shoji.Tensor("uint8", dims=('dots',))
        dots_data_ws.BarcodeReferenceDotID =           shoji.Tensor("string", dims=('dots',))
        dots_data_ws.DotChannel =                      shoji.Tensor("string", dims=('dots',))
        dots_data_ws.GeneID =                          shoji.Tensor("string", dims=('dots',))
        dots_data_ws.HammingDistanceRawBarcode =       shoji.Tensor("float64", dims=('dots',))

        # add rank-1 tensors for the fitering of the barcodes and genes

        # Higher ranking tensors
        dots_data_ws.DotCoordsFOV =                    shoji.Tensor("float64", dims=('dots','fov','hybridization','rc'))
        dots_data_ws.DotIntensity =                    shoji.Tensor("float64", dims=('dots','fov','hybridization'))
        dots_data_ws.SelectedThreshold =               shoji.Tensor("float64", dims=('dots','fov','hybridization'))
        dots_data_ws.ProcessingType =                  shoji.Tensor("string", dims=('dots','fov','hybridization'))
        dots_data_ws.DotsCoordsRegisteredFOV =         shoji.Tensor("float64", dims=('dots','fov','hybridization','rc'))
        dots_data_ws.DotsCoordsStitched =              shoji.Tensor("float64", dims=('dots','fov','hybridization','rc'))
        dots_data_ws.RawBarcode =                      shoji.Tensor("bool", dims=('dots','bits'))
       
