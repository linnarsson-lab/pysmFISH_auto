"""
set of useful function to determine if different process steps
that terminated without error generated the correct output.
Ex. missing positions after parsing the data
"""

from typing import *
from prefect import task
from prefect.engine import signals
import re
import numpy as np
from pathlib import Path

from pysmFISH.logger_utils import prefect_logging_setup
from pysmFISH.configuration_files_tasks import load_experiment_config_file


def check_experiment_yaml_file(experiment_fpath:str):
    """
    This function is used to check that the parameter
    needed for processing are included in the experiment_name.yaml
    file and have the expected values
    
    Args:
        experiment_fpath: str
            str with the path to the folder of the experiment to process
    """

    experiment_info = load_experiment_config_file(experiment_fpath)
    
    logger = prefect_logging_setup('qc_experiment_yaml')

    experiment_info_keys = list(experiment_info.keys())

    if 'Codebook' not in experiment_info_keys:
        logger.error(f'Codebook keyword in the experiment file')
        raise signals.FAIL(f'Codebook keyword in the experiment file')

    if 'Barcode' not in experiment_info_keys:
        logger.error(f'Barcode keyword in the experiment file')
        raise signals.FAIL(f'Barcode keyword in the experiment file')

    if 'Barcode_length' not in experiment_info_keys:
        logger.error(f'Barcode_length keyword in the experiment file')
        raise signals.FAIL(f'Barcode_length keyword in the experiment file')
    
    if 'Machine' not in experiment_info_keys:
        logger.error(f'Machine keyword in the experiment file')
        raise signals.FAIL(f'Machine keyword in the experiment file')
    elif experiment_info['Machine'] not in ['ROBOFISH1', 'ROBOFISH2', 'NOT-DEFINED']:
        logger.error(f'Wrong machine name')
        raise signals.FAIL(f'Wrong machine name') 
    
    if 'Overlapping_percentage' not in experiment_info_keys:
        logger.error(f'Overlapping_percentage keyword in the experiment file')
        raise signals.FAIL(f'Overlapping_percentage keyword in the experiment file')

    if 'Species' not in experiment_info_keys:
        logger.error(f'Species keyword in the experiment file')
        raise signals.FAIL(f'Species keyword in the experiment file')
    elif experiment_info['Species'] not in ['Mus Musculus', 'Homo Sapiens']:
        logger.error(f'Unknown Species selected')
        raise signals.FAIL(f'Unknown Species selected')

    if 'roi' not in experiment_info_keys:
        logger.error(f'roi keyword in the experiment file')
        raise signals.FAIL(f'roi keyword in the experiment file')

    if 'StitchingChannel' not in experiment_info_keys:
        logger.error(f'StitchingChannel keyword in the experiment file')
        raise signals.FAIL(f'StitchingChannel keyword in the experiment file')

    if 'Stitching_type' not in experiment_info_keys:
        logger.error(f'Stitching_type keyword in the experiment file')
        raise signals.FAIL(f'Stitching_type keyword in the experiment file')
    elif experiment_info['Stitching_type'] not in ['small-beads', 'large-beads', 'nuclei']:
        logger.error(f'Wrong Stitching_type selected in the experiment file')
        raise signals.FAIL(f'Wrong Stitching_type selected in the experiment file')

    if 'Experiment_type' not in experiment_info_keys:
        logger.error(f'Experiment_type keyword in the experiment file')
        raise signals.FAIL(f'Experiment_type keyword in the experiment file')
    elif experiment_info['Experiment_type'] not in ['smfish-serial', 'smfish-barcoded', 'eel-barcoded']:
        logger.error(f'Wrong Experiment_type selected in the experiment file')
        raise signals.FAIL(f'Wrong Experiment_type selected in the experiment file')

    if 'Probes' not in experiment_info_keys:
        logger.error(f'Probes keyword in the experiment file')
        raise signals.FAIL(f'Probes keyword in the experiment file')



@task(name='qc_matching_pkl')
def check_matching_metadata_robofish(all_raw_files:list):
    """
    This function is used to check that each of the nd2 files
    generated by the microscope has a matching pkl metadata
    file generated by robofish

    Args:
        all_raw_files: list
            list with all the paths of the nd2 files to process

    """

    logger = prefect_logging_setup('qc_config_pkl')
    experiment_fpath = all_raw_files[0].parent
    all_info_files = list(experiment_fpath.glob('*.pkl'))
  
    if len(all_info_files) == 0:
        logger.error(f"no .pkl files in the folder")
        raise signals.FAIL()

    # Determine if there are multiple metadata files with same number
    all_codes = []
    for meta_file_path in all_info_files:
        # collect the count code
        count_code = re.search(r'(Count)\d{5}', meta_file_path.stem)
        assert count_code, logger.error(f'{meta_file_path.stem} does not contain the CountXXXXX code')
        count_code = count_code.group()
        all_codes. append(count_code)
    
    if all_codes:
        all_codes_counts_dict = {i:all_codes.count(i) for i in all_codes}
        all_codes_counts_array = np.array(list(all_codes_counts_dict.values()))
        if np.any(all_codes_counts_array>1):
            for count_code,value in all_codes_counts_dict.items():
                if value >1:
                    logger.error(f' multiple pkl files with {count_code}')
                    raise signals.FAIL()
            
            logger.error(f'fix naming of the files with the repeated codes')
            raise signals.FAIL()

    missing_pkl = []
    for nd2_file_path in all_raw_files:
        # collect the count code
        try:
            count_code = re.search(r'(Count)\d{5}', nd2_file_path.stem).group()
        except:
            count_code = None
            logger.error(f'{nd2_file_path.stem} does not contain the CountXXXXX code')
        try:
            info_file = [info_file for info_file in all_info_files if count_code  in info_file.stem][0]
        except IndexError:
            logger.error(f'{nd2_file_path.stem} does not have the corresponding pkl file')
            missing_pkl.append(nd2_file_path.stem)

    if missing_pkl:
        logger.error(f'collect the missing pkl for {missing_pkl} before parsing')
        raise signals.FAIL()