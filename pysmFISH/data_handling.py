from typing import *
import yaml
import shoji
import numpy as np
from pathlib import Path

from prefect import task
from prefect.engine import signals

from pysmFISH.logger_utils import prefect_logging_setup


@task(name='create_shoji_db')
def create_shoji_db(experiment_info:Dict):
    """
    This function creates the shoji database that will be used to store
    the output of the analysis. It will also contain the standard settings
    for automated analysis and the parameter obtained from the experiment.yaml
    file generated by the machine

    NB: The settings for the analysis are  adjusted according to the machine 
        used for acquisition. In our case the machines have different components.


        experiment_info: dict
            dictionary containing all the info generated by robofish
    """
    logger = prefect_logging_setup('create-analasys-config-file')


    try:
        machine = experiment_info['Machine']
    except NameError:
        machine = 'NOT_DEFINED'

    try:
        db = shoji.connect()
    except:
        logger.error(f'Cannot connect to shoji DB')
        err = signals.FAIL(f'Cannot connect to shoji DB')
        raise err
    else:
        if 'FISH' not in db:
            db.FISH = shoji.Workspace()
        else:
            experiment_name = experiment_info['EXP_number']
            if experiment_name not in db.FISH:
                db.FISH[experiment_name] = shoji.Workspace()
                ws = db.FISH[experiment_name]
            else:
                ws = db.FISH[experiment_name]

        # Dimenstion of the tensors
        ws.genes = shoji.Dimension(shape=None)   # None means jagged or variable-length
        ws.dots =  shoji.Dimension(shape=None)   # None means jagged
        ws.rc =    shoji.Dimension(shape=2)      # 2 spatial coordinates
        # ws.bits =  shoji.Dimension(shape=16)     # 16 bits barcode length
        # ws.cell_id = shoji.Dimension(shape=None)
        # ws.cell_type = shoji.Dimension(shape=None)


        # Properties that will be parsed from the experimental yaml file
        # generated by the machine
        # Populate the database with the data in the experiment yaml file

        try:
            ws.Age = shoji.Tensor("uint8", dims=(), inits=int(experiment_info['Age']))
        except ValueError:
            shoji.Tensor("uint8", dims=(), inits=None)

        ws.Barcode =                       shoji.Tensor("bool", dims=(), inits=experiment_info['Barcode'] == 'True') 
        ws.BarcodeLength =                 shoji.Tensor("uint8",dims=(), inits=experiment_info['Barcode_length']) 
        ws.ChamberExp =                    shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Chamber_EXP'],dtype=object)) 
        ws.Chemistry =                     shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Chemistry'],dtype=object)) 
        ws.CodebookName =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Codebook'],dtype=object)) 
        ws.ProbeSetName =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Probes'],dtype=object)) 
        ws.ExperimentType =                shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Experiment_type'],dtype=object))
        ws.ExperimentNumber =               shoji.Tensor("string",dims=(),inits=np.array(experiment_info['EXP_number'],dtype=object))
        ws.Machine =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Machine'],dtype=object))
        ws.Program =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Program'],dtype=object))
        ws.Operator =                      shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Operator'],dtype=object))
        ws.Sample =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Sample'],dtype=object))
        ws.SectionID =                     shoji.Tensor("string",dims=(),inits=np.array(experiment_info['SectionID'],dtype=object))
        ws.Species =                       shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Species'],dtype=object))
        ws.Strain =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Strain'],dtype=object))
        ws.Tissue =                        shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Tissue'],dtype=object))
        ws.Roi =                           shoji.Tensor("string",dims=(),inits=np.array(experiment_info['roi'],dtype=object))
        ws.RegionImaged =                  shoji.Tensor("string",dims=(),inits=np.array(experiment_info['RegionImaged'],dtype=object))
        ws.SampleOrientation =             shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Orrientation'],dtype=object))
        ws.TilesOverlappingPercentage =    shoji.Tensor("float32",dims=(),inits=np.float32(experiment_info['Overlapping_percentage']))
        ws.StitchingChannel =              shoji.Tensor("string",dims=(),inits=np.array(experiment_info['StitchingChannel'],dtype=object))
        ws.StitchingType =                 shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Stitching_type'],dtype=object))
        ws.DataGenerationDate =            shoji.Tensor("string",dims=(),inits=np.array(experiment_info['Start_date'],dtype=object))


        # Tensors used to store the output of dot calling
        ws.DotsCoordsFOV =           shoji.Tensor("float64", dims=('genes','dots','rc'))
        ws.DotID =                   shoji.Tensor("string", dims=('genes','dots'))
        ws.FovNumber =               shoji.Tensor("uint16", dims=('genes','dots'))
        ws.HybridizationNumber =     shoji.Tensor("uint16", dims=('genes','dots'))
        ws.DotIntensity =            shoji.Tensor("float64", dims=('genes','dots'))
        ws.SelectedThreshold =       shoji.Tensor("float64", dims=('genes','dots'))
        ws.DotChannel =              shoji.Tensor("string", dims=('genes','dots'))

        # Properties with the defauls analysis settings. The settings are 
        # adjusted according to the machine used for acquisition. In our case
        # the machines have different components

        ws.RegistrationReferenceHybridization = shoji.Tensor("uint8", dims=(), inits=1)

        if machine == 'ROBOFISH1':
            ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8))

            ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8))

            ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8)) 

            ws.CountingFishMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=3)                                                                   

            ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))

            ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint8", dims=(2,), inits=np.array([50,50], dtype=np.uint8))

        elif machine == 'ROBOFISH2':

            ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8)) 

            ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8)) 

            ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8))

            ws.CountingFishMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=3)                                                                   

            ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))

            ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint8", dims=(2,), inits=np.array([50,50], dtype=np.uint8))

        elif machine == 'NOT_DEFINED':

            ws.PreprocessingFishFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingFishFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingFishFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8)) 

            ws.PreprocessingSmallBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingSmallBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8)) 

            ws.PreprocessingLargeBeadsRegistrationFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringSmallKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([8,8], dtype=np.uint8))
            ws.PreprocessingLargeBeadsRegistrationFilteringLaplacianKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([1,1], dtype=np.uint8))

            ws.CountingFishMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingFishMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingFishNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingSmallBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingSmallBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingSmallBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.CountingLargeBeadsRegistrationMinObjDistance =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationhMinObjSize =  shoji.Tensor("uint8", dims=(), inits=2)
            ws.CountingLargeBeadsRegistrationMaxObjSize =  shoji.Tensor("uint8", dims=(), inits=200)
            ws.CountingLargeBeadsRegistrationNumPeaksPerLabel =  shoji.Tensor("uint8", dims=(), inits=1)

            ws.BarcodesExtractionResolution =   shoji.Tensor("uint8", dims=(), inits=3)                                                                   

            ws.PreprocessingStainingFlatFieldKernel = shoji.Tensor("uint8", dims=(2,), inits=np.array([100,100], dtype=np.uint8))

            ws.PreprocessingFreshNucleiLargeKernelSize = shoji.Tensor("uint8", dims=(2,), inits=np.array([50,50], dtype=np.uint8))
        